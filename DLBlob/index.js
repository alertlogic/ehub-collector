/* ----------------------------------------------------------------------------
 * @copyright (C) 2018, Alert Logic, Inc
 * @doc
 * 
 * The purpose of this function is to process dead letter blobs generated by 
 * EhubGeneral function.
 * Dead letter blobs are located in 'alertlogic-dl' container located in the
 * web application storage account.
 * 
 * @end
 * ----------------------------------------------------------------------------
 */

const AlAzureDlBlob = require('@alertlogic/al-azure-collector-js').AlAzureDlBlob;
const ehubCollector = require('../common/ehub_collector');
const ehubGeneralFormat = require('../EHubGeneral/format').logRecord;

function getCollectorFunName(blobName) {
    return blobName.split('/')[1];
}

const processErrorFun = function(context, err, messages) {
    context.log.error('Error processing batch:', err);
    var skipped = messages.records ? messages.records.length : messages.length;
    return skipped;
};

function processBlob(context, blob, dlblobText, callback) {
    var formatFun;
    switch(getCollectorFunName(blob.name)) {
        case 'ehubgeneral':
            formatFun =  ehubGeneralFormat;
            break;
        default:
            formatFun =  ehubGeneralFormat;
            break;
    }
    
    try {
        ehubCollector(context, JSON.parse(dlblobText), formatFun, processErrorFun, function(error, result) {
            if (result.skipped) {
                return callback(`Unprocessed records: ${result.skipped}`);
            } else {
                return callback(error);
            }
        });
    } catch (ex) {
        return callback(ex);
    }
}

module.exports = function (context, AlertlogicDLBlobTimer) {
    var dlblob = new AlAzureDlBlob(context, processBlob);
    dlblob.processDlBlobs(AlertlogicDLBlobTimer, function(error, result) {
        if (!error) {
            var processingErrors = result.filter(function(item) {
                if (item.error) {
                    return true;
                } else {
                    return false;
                }
            });
            if (processingErrors.length > 0) {
                context.done(processingErrors);
            } else {
                context.done();
            }
        } else {
            context.done(error);
        }
    });
};

